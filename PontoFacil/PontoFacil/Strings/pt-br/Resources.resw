<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccumulatedHoursLabel.Text" xml:space="preserve">
    <value>Horas acumuladas</value>
  </data>
  <data name="ChooseAnEndDate.PlaceholderText" xml:space="preserve">
    <value>Escolha uma data final</value>
  </data>
  <data name="ChooseAStartDate.PlaceholderText" xml:space="preserve">
    <value>Escolha uma data inicial</value>
  </data>
  <data name="Date.Text" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="EnableNotify.Content" xml:space="preserve">
    <value>Habilitar notificação</value>
  </data>
  <data name="EndDate.Text" xml:space="preserve">
    <value>Data final</value>
  </data>
  <data name="EndTime.Text" xml:space="preserve">
    <value>Saída</value>
  </data>
  <data name="Entry.Text" xml:space="preserve">
    <value>Entrada</value>
  </data>
  <data name="Exit.Text" xml:space="preserve">
    <value>Saída</value>
  </data>
  <data name="FreePeriod.Content" xml:space="preserve">
    <value>Período livre</value>
  </data>
  <data name="History.Text" xml:space="preserve">
    <value>Histórico</value>
  </data>
  <data name="HoursToAdjust.Text" xml:space="preserve">
    <value>Horas a serem ajustadas</value>
  </data>
  <data name="HoursToAdjustValue.PlaceholderText" xml:space="preserve">
    <value>Exemplo 50</value>
  </data>
  <data name="linkPreposition" xml:space="preserve">
    <value>de</value>
  </data>
  <data name="LunchTime.Text" xml:space="preserve">
    <value>Intervalo do almoço</value>
  </data>
  <data name="MinutesBeforeExit.Text" xml:space="preserve">
    <value>minutos antes da saída</value>
  </data>
  <data name="Monthly.Content" xml:space="preserve">
    <value>Mensal (Mês atual)</value>
  </data>
  <data name="NumberOfDays.Text" xml:space="preserve">
    <value>Em quantos dias</value>
  </data>
  <data name="NumberOfDaysValue.PlaceholderText" xml:space="preserve">
    <value>Exemplo 10</value>
  </data>
  <data name="OneHour.Content" xml:space="preserve">
    <value>1 hora</value>
  </data>
  <data name="OvertimeHours.Text" xml:space="preserve">
    <value>Hora Extra</value>
  </data>
  <data name="Period.Text" xml:space="preserve">
    <value>Período</value>
  </data>
  <data name="Save.Content" xml:space="preserve">
    <value>Salvar</value>
  </data>
  <data name="SaveSuccess" xml:space="preserve">
    <value>Configurações salvas com sucesso!</value>
  </data>
  <data name="Settings.Text" xml:space="preserve">
    <value>Configurações</value>
  </data>
  <data name="ShowHistory.Content" xml:space="preserve">
    <value>Mostrar histórico</value>
  </data>
  <data name="StartDate.Text" xml:space="preserve">
    <value>Data inicial</value>
  </data>
  <data name="StartDay.Text" xml:space="preserve">
    <value>Dia de inicio</value>
  </data>
  <data name="TwoHours.Content" xml:space="preserve">
    <value>2 horas</value>
  </data>
  <data name="StartTime.Text" xml:space="preserve">
    <value>Entrada</value>
  </data>
  <data name="TotalHours.Text" xml:space="preserve">
    <value>Saldo Total</value>
  </data>
  <data name="ToWaiver.Content" xml:space="preserve">
    <value>Abonar</value>
  </data>
  <data name="UserName.Text" xml:space="preserve">
    <value>Nome do usuário</value>
  </data>
  <data name="Waiver.Text" xml:space="preserve">
    <value>Abono</value>
  </data>
  <data name="WarnMe.Text" xml:space="preserve">
    <value>Avise-me</value>
  </data>
  <data name="CurrentJorney.Text" xml:space="preserve">
    <value>Acompanhamento da Jornada</value>
  </data>
  <data name="Register.Content" xml:space="preserve">
    <value>Registrar</value>
  </data>
  <data name="WorkedHours.Text" xml:space="preserve">
    <value>Horas trabalhadas</value>
  </data>
  <data name="EndDateGreaterThenStartDate" xml:space="preserve">
    <value>A data final deve ser maior que a data inicial</value>
  </data>
  <data name="EndDateLessThenCurrentDate" xml:space="preserve">
    <value>A data final deve ser menor que a data atual</value>
  </data>
  <data name="StartDateLessThenCurrentDate" xml:space="preserve">
    <value>A data inicial deve ser menor que a data atual</value>
  </data>
  <data name="ClockInReminder" xml:space="preserve">
    <value>Hora de bater o ponto!</value>
  </data>
  <data name="Reminder" xml:space="preserve">
    <value>Lembrete</value>
	</data>
  <data name="AccumulatedHours.Text" xml:space="preserve">
    <value>Saldo: </value>
  </data>
  <data name="AccumulatedHoursIsNotEmpty" xml:space="preserve">
    <value>As horas acumuladas devem ser informadas</value>
  </data>
  <data name="EntryHourSameExit" xml:space="preserve">
    <value>A hora da entrada deve ser diferente da saída</value>
  </data>
  <data name="LunchTimeIsNotEmpty" xml:space="preserve">
    <value>O intervalo do almoço deve ser informado</value>
  </data>
  <data name="NameIsNotEmpty" xml:space="preserve">
    <value>O nome deve informado</value>
  </data>
  <data name="NotifyTimeNotEmpty" xml:space="preserve">
    <value>O tempo para notificação precisa ser informado</value>
  </data>
  <data name="NotifyNotEmpty" xml:space="preserve">
    <value>A notificação precisa ser informada</value>
  </data>
</root>